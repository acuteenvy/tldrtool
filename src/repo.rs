use std::fs::{self, File};
use std::io::{self, Write};
use std::path::PathBuf;

use crate::error::{Error, Result};
use crate::util::{cmd, infoln, spawn, warnln};

pub struct Repository {
    pub path: PathBuf,
    pub fork: String,
}

impl Repository {
    fn locate() -> PathBuf {
        dirs::cache_dir().unwrap().join(clap::crate_name!())
    }

    pub fn locate_config() -> PathBuf {
        dirs::config_dir()
            .unwrap()
            .join(clap::crate_name!())
            .join("fork")
    }

    fn exists(&self) -> bool {
        self.path.join("pages").exists()
    }

    pub fn ensure_exists(&self) -> Result<bool> {
        if self.exists() {
            Ok(true)
        } else {
            warnln!("'{}': not a directory", self.path.join("pages").display());
            spawn(&mut cmd!(
                "git",
                "clone",
                format!("git@github.com:{}.git", self.fork),
                &self.path
            ))?;

            spawn(&mut cmd!(
                "git",
                "-C",
                &self.path,
                "remote",
                "add",
                "upstream",
                "https://github.com/tldr-pages/tldr.git"
            ))?;

            Ok(false)
        }
    }

    fn write_config(&self) -> Result<()> {
        let location = Self::locate_config();
        fs::create_dir_all(location.parent().unwrap())?;

        write!(
            File::create(location)?,
            "DO NOT EDIT THIS FILE.\n\
        If you want to change your repository, run 'tlt setup' instead.\n{}",
            self.fork
        )
        .map_err(|e| Error::Msg(format!("failed to write to the config file: {e}")))?;

        Ok(())
    }

    pub fn setup_config() -> Result<Self> {
        let mut fork = String::new();
        writeln!(
            io::stdout(),
            "Please enter the github path to your fork (username/repo_name): "
        )?;
        io::stdout().flush()?;
        io::stdin().read_line(&mut fork)?;

        let repo = Self {
            path: Self::locate(),
            fork: fork.strip_suffix('\n').unwrap().to_string(),
        };
        repo.write_config()?;

        if repo.exists() {
            infoln!(
                "deleting the old repository. The new one will be cloned the next time you run 'tlt'."
            );
            fs::remove_dir_all(&repo.path)?;
        }

        Ok(repo)
    }

    pub fn get() -> Result<Self> {
        let location = Self::locate_config();

        if !location.is_file() {
            warnln!("the config file does not exist");
            let repo = Self::setup_config()?;

            return Ok(repo);
        }

        let file_contents = fs::read_to_string(location)?;

        Ok(Self {
            path: Self::locate(),
            fork: file_contents.lines().last().unwrap().to_string(),
        })
    }
}
